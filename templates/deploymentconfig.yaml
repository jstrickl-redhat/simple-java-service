kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: {{ .Values.applicationName }}
  labels:
    app: {{ .Values.applicationName }}
spec:
  triggers: []
  strategy:
    type: {{ .Values.deploymentStrategy.type }}
    {{- if eq .Values.deploymentStrategy.type "rolling" }}
    {{- with .Values.deploymentStrategy }}
    rollingParams:
      updatePeriodSeconds: {{ .rollingUpdatePeriod }}
      intervalSeconds: {{ .rollingInterval }}
      timeoutSeconds: {{ .timeout }}
      maxSurge: {{ .rollingMaxSurge }}
      maxUnavailable: {{ .rollingMaxUnavailable }}
    {{- end }}
    {{- end }}
    {{- if eq .Values.deploymentStrategy.type "recreate" }}
    recreateParams:
      timeoutSeconds: {{ .Values.deploymentStrategy.timeout }}
    {{- end }}
  replicas: {{ .Values.replicaCount }}
  selector:
    deploymentConfig: {{ .Values.applicationName }}
  template:
    metadata:
      name: {{ .Values.applicationName }}
      labels:
        deploymentConfig: {{ .Values.applicationName }}
        app: {{ .Values.applicationName }}
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: {{ .Values.applicationName }}
        image: {{ .Values.imageURL }}:{{ .Values.version }}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: {{ .Values.port }}
          protocol: TCP
        {{- with .Values.env }}
        env:
          {{- toYaml . | nindent 12 }}
        {{- end }}

        resources:
          {{- if .Values.limits }}
          limits:
            cpu: {{ .Values.limits.cpu }}
            memory: {{ .Values.limits.memory }}
          {{- end }}
          {{- if .Values.requests }}
          requests:
            cpu: {{ .Values.requests.cpu }}
            memory: {{ .Values.requests.memory }}
          {{- end }}
        {{- with .Values.health }}
        readinessProbe:
          httpGet:
            path: {{ .readinessEndpoint }}
            port: {{ $.Values.port }}
          initialDelaySeconds: {{ .probeDelay }}
          timeoutSeconds: {{ .probeTimeout }}
        livenessProbe:
          httpGet:
            path: {{ .livenessEndpoint }}
            port: {{ $.Values.port }}
          periodSeconds: {{ .probePeriod }}
          initialDelaySeconds: {{ .probeDelay }}
          timeoutSeconds: {{ .probeTimeout }}
        {{- end }}
        volumeMounts:
        - name: {{ .Values.applicationName }}-secret-volume
          mountPath: /deployments/config
      volumes:
        - name: {{ .Values.applicationName }}-secret-volume
          secret:
            secretName: {{ .Values.applicationName }}-secret
